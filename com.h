#ifndef COM_H
#define COM_H

#include <QObject>
#include <QtSerialPort/QSerialPort> //Обьявляем работу с портом
#include <QTimer>


class Com: public QObject
{
    Q_OBJECT
public:
    explicit Com(QObject *parent=nullptr);
    ~Com();
    QSerialPort *port = new QSerialPort(this);
    QByteArray h00,// код реле - выкл все
               h21, // код реле - К5+К9 - замыкается 1 МОм и охранный с измерительным электроды
               h29, // код реле - К4+К5+К9 - замыкается 1 МОм + охранный с измерительным электроды + ИОН на 100 МОм(для калибровки 100 МОм)
               h15, // код реле - К2+К3+К9 - замыкается 100 МОм + охранный с измерительным электроды + ИОН на 10 ГОм(для калибровки 10 ГОм)
               h61, // код реле - К5+К6+К7+К9 - сбрасывается заряд на С1 и С2 + охранный с измерительным электроды
               h45, // код реле - К2+К6+К9 - заряжается конденсатор С2(К6) (47нФ) током от ИОН через 10 ГОм(К2) (250пА)+ охранный с измерительным электроды(К9)
               h03, // код реле - К1+К9 - замыкается 10 ГОм + охранный с измерительным электроды - измерение входного тока

               hC2, // код реле - К1+К7+К8 - Чувствительный диапазон + фильтр шумов (С1 - 560пФ)
               h82, // код реле - К1+К8 - Чувствительный диапазон
               h90, // код реле - К3+К8 - Средний диапазон (на среднем диапазоне фильтр шумов не подключается)
               hA0, // код реле - К5+К7+К8 - Грубый диапазон + фильтр шумов (С1 - 560пФ) (на грубом диапазоне фильтр шумов не отключается)
                    // + сброс заряда (по кнопке стоп) в режиме измерения заряда на чувствительном диапазоне
               h80, // код реле - К7+К8 - заряд (по кнопке старт) в режиме измерения заряда на чувствительном диапазоне
               hE0, // код реле - К5+К6+К7+К8 - сброс заряда (по кнопке стоп) в режиме измерения заряда на чувствительном диапазоне
               hC0; // код реле - К6+К8 - заряд (по кнопке старт) в режиме измерения заряда на среднем и грубом диапазоне
signals:
    void finished_Port(); //Сигнал закрытия класса
    void PortConnect(); //Сигнал об открытии порта
    void outPort(QString); //Сигнал вывода полученных данных
    void process_Port_Start();//Сигнал о старте потока
public slots:
    void DisconnectPort(); // Слот отключения порта
    void ConnectPort(void); // Слот подключения порта
    void process_Port(); //Тело
    void WriteToPort(QByteArray data); // Слот от правки данных в порт
    void timeOut();
    void ReadInPort(); //Слот чтения из порта по ReadyRead
    void timeOutDelay();
    void closePort();
private slots:

private:
    QString COM;
    QTimer *timer1 = new QTimer(this);//таймер чтения с COM порта
    QTimer *timerDelay = new QTimer(this);//таймер задержки

};

#endif // COM_H
